// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package spotify

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// newMocktrackSearcher creates a new instance of mocktrackSearcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMocktrackSearcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *mocktrackSearcher {
	mock := &mocktrackSearcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mocktrackSearcher is an autogenerated mock type for the trackSearcher type
type mocktrackSearcher struct {
	mock.Mock
}

type mocktrackSearcher_Expecter struct {
	mock *mock.Mock
}

func (_m *mocktrackSearcher) EXPECT() *mocktrackSearcher_Expecter {
	return &mocktrackSearcher_Expecter{mock: &_m.Mock}
}

// SearchTrack provides a mock function for the type mocktrackSearcher
func (_mock *mocktrackSearcher) SearchTrack(ctx context.Context, artist string, track string, album string) (SearchTrackResponse, error) {
	ret := _mock.Called(ctx, artist, track, album)

	if len(ret) == 0 {
		panic("no return value specified for SearchTrack")
	}

	var r0 SearchTrackResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (SearchTrackResponse, error)); ok {
		return returnFunc(ctx, artist, track, album)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) SearchTrackResponse); ok {
		r0 = returnFunc(ctx, artist, track, album)
	} else {
		r0 = ret.Get(0).(SearchTrackResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, artist, track, album)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mocktrackSearcher_SearchTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTrack'
type mocktrackSearcher_SearchTrack_Call struct {
	*mock.Call
}

// SearchTrack is a helper method to define mock.On call
//   - ctx context.Context
//   - artist string
//   - track string
//   - album string
func (_e *mocktrackSearcher_Expecter) SearchTrack(ctx interface{}, artist interface{}, track interface{}, album interface{}) *mocktrackSearcher_SearchTrack_Call {
	return &mocktrackSearcher_SearchTrack_Call{Call: _e.mock.On("SearchTrack", ctx, artist, track, album)}
}

func (_c *mocktrackSearcher_SearchTrack_Call) Run(run func(ctx context.Context, artist string, track string, album string)) *mocktrackSearcher_SearchTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *mocktrackSearcher_SearchTrack_Call) Return(searchTrackResponse SearchTrackResponse, err error) *mocktrackSearcher_SearchTrack_Call {
	_c.Call.Return(searchTrackResponse, err)
	return _c
}

func (_c *mocktrackSearcher_SearchTrack_Call) RunAndReturn(run func(ctx context.Context, artist string, track string, album string) (SearchTrackResponse, error)) *mocktrackSearcher_SearchTrack_Call {
	_c.Call.Return(run)
	return _c
}
